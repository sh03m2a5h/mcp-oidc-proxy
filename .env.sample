# MCP OIDC Proxy Configuration
# Copy this file to .env and update with your settings

# Authentication Mode
# Options: oidc, bypass
# - oidc: Enable OAuth 2.1/OIDC authentication
# - bypass: Disable authentication (for testing)
AUTH_MODE=bypass

# Target MCP Server Configuration
# The MCP server that this proxy will forward requests to
# Use 'host.docker.internal' to connect to MCP server running on host machine
# Use 'localhost' only if MCP server is running inside the same Docker container
MCP_TARGET_HOST=host.docker.internal
MCP_TARGET_PORT=3000

# Generic OIDC Configuration (Recommended)
# Works with any OIDC-compliant provider
# Example providers:
# - Auth0: https://your-domain.auth0.com/.well-known/openid-configuration
# - Google: https://accounts.google.com/.well-known/openid-configuration
# - Microsoft: https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration
# - GitHub: https://token.actions.githubusercontent.com/.well-known/openid-configuration
OIDC_DISCOVERY_URL=
OIDC_CLIENT_ID=
OIDC_CLIENT_SECRET=

# Legacy Auth0 Configuration (Backward compatibility)
# These will be automatically converted to OIDC_DISCOVERY_URL if set
# AUTH0_DOMAIN=your-domain.auth0.com
# AUTH0_CLIENT_ID=your-client-id
# AUTH0_CLIENT_SECRET=your-secret

# Session Configuration
# Redis URL for session storage
REDIS_URL=redis://redis:6379

# Advanced OIDC Options (Optional)
# OIDC_REDIRECT_URI_PATH=/callback
# OIDC_LOGOUT_PATH=/logout
# OIDC_POST_LOGOUT_REDIRECT_URI=/
# OIDC_RENEW_ACCESS_TOKEN_ON_EXPIRY=true
# OIDC_ACCESS_TOKEN_EXPIRES_IN=3600
# OIDC_SESSION_INACTIVITY_TIMEOUT=900
# OIDC_SESSION_MAX_LIFETIME=28800
# OIDC_SESSION_DESTROY_ON_LOGOUT=true

# Security Options
# OIDC_SSL_VERIFY=yes
# OIDC_TOKEN_ENDPOINT_AUTH_METHOD=

# Debugging
# Set to true to enable debug logging
# DEBUG=false