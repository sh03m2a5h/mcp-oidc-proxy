# MCP OAuth 2.1 認証プロキシ設定

# エラーログレベル設定
error_log /dev/stderr warn;

# Luaモジュールのパス設定
lua_package_path '/etc/nginx/lua/?.lua;;';

# OpenIDCの共有ディクショナリ設定
lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;
lua_shared_dict introspection 10m;
lua_shared_dict sessions 10m;

# DNSリゾルバ設定
resolver 127.0.0.11 8.8.8.8 ipv6=off;

# HTTPサーバー
server {
    listen 80;
    server_name localhost;

    # OAuth認証設定
    location / {
        access_by_lua_block {
            -- 環境変数からAuth0認証モードを確認
            local auth_mode = os.getenv("AUTH_MODE") or "bypass"
            ngx.log(ngx.WARN, "Checking auth mode: " .. auth_mode)
            
            if auth_mode == "bypass" then
                -- 認証をバイパス
                ngx.log(ngx.WARN, "Auth mode: bypass")
                ngx.req.set_header("X-USER", "test-user")
                ngx.req.set_header("X-EMAIL", "test@example.com")
                ngx.req.set_header("X-NAME", "Test User")
                ngx.req.set_header("X-ROLES", "user")
                ngx.req.set_header("MCP-Protocol-Version", "2025-03-26")
            else
                -- OIDC認証を使用
                ngx.log(ngx.WARN, "Auth mode: oidc")
                -- OIDCモジュールの読み込み
                local oidc = require("oidc")
                
                -- OIDC設定の構築
                local opts = oidc.build_oidc_opts("http://localhost:8080/callback")
                if not opts then
                    ngx.status = 500
                    ngx.log(ngx.ERR, "Failed to build OIDC options")
                    ngx.say("Authentication configuration failed")
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                
                -- セッション設定の取得
                local session_opts = oidc.get_session_opts()
                
                -- 認証処理実行
                local res, err = require("resty.openidc").authenticate(opts, nil, "http://localhost:8080/")
                if err then
                    ngx.status = 500
                    ngx.log(ngx.ERR, "OIDC authentication failed: " .. err)
                    ngx.say("Authentication failed: " .. err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                
                -- ユーザー情報ヘッダーの設定
                oidc.set_user_headers(res)
                
                -- MCP-Protocol-Version ヘッダー追加
                ngx.req.set_header("MCP-Protocol-Version", "2025-03-26")
            end
        }
        
        # 外部MCPサーバーへプロキシ
        proxy_pass http://mcp_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocketサポート
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # タイムアウト設定
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # OAuthコールバックエンドポイント
    location /callback {
        access_by_lua_block {
            -- 環境変数からOIDC認証モードを確認
            local auth_mode = os.getenv("AUTH_MODE") or "bypass"
            
            if auth_mode == "bypass" then
                -- 認証をバイパス
                return ngx.redirect("/")
            else
                -- OIDC認証を使用
                -- OIDCモジュールの読み込み
                local oidc = require("oidc")
                
                -- OIDC設定の構築
                local opts = oidc.build_oidc_opts("http://localhost:8080/callback")
                if not opts then
                    ngx.status = 500
                    ngx.log(ngx.ERR, "Failed to build OIDC options")
                    ngx.say("Authentication configuration failed")
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                
                -- セッション設定の取得
                local session_opts = oidc.get_session_opts()
                
                -- 認証処理実行
                local res, err = require("resty.openidc").authenticate(opts, nil, "http://localhost:8080/")
                if err then
                    ngx.status = 500
                    ngx.log(ngx.ERR, "OIDC authentication failed: " .. err)
                    ngx.say("Authentication failed: " .. err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
                
                -- 認証成功時、ホームページにリダイレクト
                return ngx.redirect("/")
            end
        }
    }

    # ヘルスチェックエンドポイント
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
}